import streamlit as st
from controller import App
import os
import base64

from download_models import ensure_models
ensure_models()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
st.set_page_config(page_title="MITRE ATT&CK –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", page_icon="üõ°Ô∏è", layout="centered")
st.markdown("<h1 style='text-align: center;'>üõ°Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –ø–æ MITRE ATT&CK</h1>", unsafe_allow_html=True)
st.markdown("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏ –Ω–∏–∂–µ. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")


# === –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ===
def list_available_models():
    models_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "models"))  # –ø—É—Ç—å –∫ ./models –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    return sorted([f for f in os.listdir(models_path) if os.path.isdir(os.path.join(models_path, f))])


# === –ö–ª–∞—Å—Å Interface ===
class Interface:
    def __init__(self):
        self.models = list_available_models()
        self.selected_model_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", self.models)
        self.app = App(model_path=os.path.abspath(os.path.join(os.path.dirname(__file__), "models", self.selected_model_name)))


    def run(self):
        user_input = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏", height=200, placeholder="–ü—Ä–∏–º–µ—Ä: The attacker gained initial access via phishing and executed scripts to escalate privileges...")

        if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
            clean_text = user_input.strip()
            word_count = len(clean_text.split())

            if not clean_text:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
            elif len(clean_text) < 20:
                st.warning("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ç–∞–∫–∏.")
            elif word_count < 5:
                st.warning("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            else:
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
                    result = self.app.classify(clean_text)
                if result:
                    st.success("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞–∫—Ç–∏–∫–∏:")
                    st.markdown("\n".join(f"- **{label}**" for label in result))

                    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON ===
                    json_data = self.app.save_result(clean_text)
                    b64 = base64.b64encode(json_data.encode()).decode()
                    href = f'<a href="data:file/json;base64,{b64}" download="classification_result.json">üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (JSON)</a>'
                    st.markdown(href, unsafe_allow_html=True)
                else:
                    st.info("–¢–∞–∫—Ç–∏–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    interface = Interface()
    interface.run()
